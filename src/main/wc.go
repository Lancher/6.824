package main

import (
	"fmt"
	"mapreduce"
	"os"
	"log"
	"strconv"
	"bytes"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	var kvs [] mapreduce.KeyValue


	var words [] string
	var buffer bytes.Buffer

	// strip the word
	for _, b := range contents {
		if 48 <= b && b <= 57 ||  65 <= b && b <= 90 || 97 <= b && b <= 122{
			buffer.WriteByte(byte(b))
		} else {
			word := buffer.String()
			if 0 < len(word) {
				words = append(words, word)
			}
			buffer.Reset()
		}
	}
	word := buffer.String()
	if 0 < len(word) {
		words = append(words, word)
	}

	// append to slice
	for _, word := range words{
		kv := mapreduce.KeyValue{Key: word, Value: "1"}
		kvs = append(kvs, kv)
	}
	return kvs
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	cnt := 0
	for _, s := range values {
		i, err := strconv.Atoi(s)
		if err != nil {
			log.Fatal(err)
		}
		cnt += i
	}
	return strconv.Itoa(cnt)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
